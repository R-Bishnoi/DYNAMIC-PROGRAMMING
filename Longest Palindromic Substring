//brute force approach

class Solution{   
public:


int palin(string s,int i,int j){
    
    while(j>=i){
        if(s[i]==s[j]){
            i++;
            j--;
        }
        else return 0;
    }
    
    return 1;
}



string longestPalindrome(string s1){
        
        int n=s1.size();
    vector<vector<int>>dp(n,vector<int>(n+1,-1));

   int a=0,b=0;
   int diff=0;
 for(int i=0;i<n;i++){
     int min=n+1;
     int max=0;
     
     for(int j=0;j<n;j++){
       if(palin(s1,i,j)==1){
           if(i<min)min=i;
           if(j>max)max=j;
       } 
     }
    
    if((max-min)>diff) {
        diff=max-min;
        b=max;
        a=min;
    }
     
 }
 
 
 string res="";
 for(int i=a;i<=b;i++){
     res+=s1[i];
 }

return res;
 
    }

};





//using dp timecomplexity  O(n^2)
//space complexity  O(n^2)

class Solution {
public:
    string longestPalindrome(string s) {
       int n=s.size(); 
      vector<vector<bool>>dp(n,vector<bool>(n,false));
       
        if(n==1)return s;
        if(n==2){
            if(s[0]==s[1])return s;
            string ans="";
            ans=ans+s[0];
             return ans;
        }        
        

 for(int g=0;g<n;g++){
     for(int i=0,j=g;j<n;i++,j++){
         
    if(g==0)
        dp[i][j]=true;
     
    else if(g==1)
         dp[i][j]=(s[i]==s[j]);

   
     else{
         dp[i][j]=((s[i]==s[j])&&dp[i+1][j-1]);
        if(g==n-1&&dp[i][j]==true) return s;    
       }
         
         
     }
     
 }
        
        
        
        
        int a=0,b=0;
   for(int g=0;g<n;g++){
     for(int i=0,j=g;j<n;i++,j++){
         
    if(dp[i][j]==true){
        a=i;
        b=j;
    }      
     }
     
 }
         
       
    
        
        
        string temp="";
        
        
for(int k=a;k<=b;k++)
    temp=temp+s[k];
        
        
        
  /*     
  for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
          cout<<dp[i][j]<<" ";
      }
      cout<<endl;
  }      
  
   cout<<a<<" "<<b<<endl;    
 
*/ 
 
  return temp;      
    }
};
