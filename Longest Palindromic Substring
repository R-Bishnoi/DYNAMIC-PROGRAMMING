//using dp timecomplexity  O(n^2)
//space complexity  O(n^2)

class Solution {
public:
    string longestPalindrome(string s) {
       int n=s.size(); 
      vector<vector<bool>>dp(n,vector<bool>(n,false));
       
        if(n==1)return s;
        if(n==2){
            if(s[0]==s[1])return s;
            string ans="";
            ans=ans+s[0];
             return ans;
        }        
        

 for(int g=0;g<n;g++){
     for(int i=0,j=g;j<n;i++,j++){
         
    if(g==0)
        dp[i][j]=true;
     
    else if(g==1)
         dp[i][j]=(s[i]==s[j]);

   
     else{
         dp[i][j]=((s[i]==s[j])&&dp[i+1][j-1]);
        if(g==n-1&&dp[i][j]==true) return s;    
       }
         
         
     }
     
 }
        
        
        
        
        int a=0,b=0;
   for(int g=0;g<n;g++){
     for(int i=0,j=g;j<n;i++,j++){
         
    if(dp[i][j]==true){
        a=i;
        b=j;
    }      
     }
     
 }
         
       
    
        
        
        string temp="";
        
        
for(int k=a;k<=b;k++)
    temp=temp+s[k];
        
        
        
  /*     
  for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
          cout<<dp[i][j]<<" ";
      }
      cout<<endl;
  }      
  
   cout<<a<<" "<<b<<endl;    
 
*/ 
 
  return temp;      
    }
};
