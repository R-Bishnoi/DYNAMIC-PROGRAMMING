///leetcode
//2311. Longest Binary Subsequence Less Than or Equal to K




//using recursion

class Solution {
public:
    
    int ans=0;
    
   int binary(vector<char>v){
       
       int dm=0;
       reverse(v.begin(),v.end());
       for(int i=0;i<=v.size()-1;i++){
           if(v[i]=='1'){
          dm+=pow(2,i);
           }
          } 
           
           
       
       
       return dm;
       
   } 
    
    
    
    
    
    
   void solve(string s,vector<char>&v,int i,int k){
       
       if(i>=s.size()){
       
       if(v.size()>0){
       int t=binary(v);
       
       if(k>=t){   
           if(v.size()>ans)ans=v.size();
                } 
         }
           
           
           return;   
       }     
           
         //take 
         v.push_back(s[i]);
       solve(s,v,i+1,k);
       
       //not take
       v.pop_back();
       solve(s,v,i+1,k);
       
       
       
   }
    
  
    

    
  int longestSubsequence(string s, int k) {
        
           vector<char>v;
       int i=0;
     
      
     
       solve(s,v,i,k);
     
        return ans;
        
    }
};





//using dp

class Solution {
public:
    
    int solve(vector<vector<int>>&dp,string &s,int i,int d,int k){
      
        if(i<0)return 0;
        if(dp[i][d]!=-1)return dp[i][d];
        
    //not take
        int no=solve(dp,s,i-1,d,k);
     
    //take
        int yes=0;
    
        if((k-(s[i]-'0')*pow(2,d))>=0){
            yes=1+solve(dp,s,i-1,d+1,k-(s[i]-'0')*pow(2,d));
        }
        
     //return the max of yes and no . actually  yes and no  storing the size of subsequences
        
        return dp[i][d]=max(yes,no);
        
        
    }
    
    
    
    
  int longestSubsequence(string s, int k) {
    
      int n=s.size();
      vector<vector<int>>dp(n+1,vector<int>(n,-1));
      
      return solve(dp,s,n-1,0,k);
        
    }
};
















